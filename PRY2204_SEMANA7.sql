SET SERVEROUTPUT ON;

-- *************************************************************
-- 0. LIMPIEZA DE ENTORNO
-- Se eliminan todas las tablas y secuencias del modelo para asegurar 
-- que el script se pueda ejecutar m칰ltiples veces sin errores.
-- *************************************************************

BEGIN
    -- Tablas que tienen dependencias (las eliminamos primero)
    FOR i IN (SELECT table_name FROM user_tables 
              WHERE table_name IN ('TITULACION', 'DOMINIO', 'PERSONAL', 'COMPANIA', 'COMUNA')) 
    LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || i.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;

    -- Tablas fuertes (sin dependencias de otras)
    FOR i IN (SELECT table_name FROM user_tables 
              WHERE table_name IN ('REGION', 'IDIOMA', 'ESTADO_CIVIL', 'TITULO', 'GENERO')) 
    LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || i.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;

    -- Secuencias espec칤ficas del modelo
    FOR i IN (SELECT sequence_name FROM user_sequences 
              WHERE sequence_name IN ('SQ_COMUNA_ID', 'SQ_COMPANIA_ID')) 
    LOOP
        EXECUTE IMMEDIATE 'DROP SEQUENCE ' || i.sequence_name;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        -- Captura errores comunes (-942: tabla/vista no existe, -2289: secuencia no existe) para evitar fallos.
        IF SQLCODE != -942 AND SQLCODE != -2289 THEN 
            DBMS_OUTPUT.PUT_LINE('Error en limpieza: ' || SQLERRM);
        END IF;
END;
/

-- *************************************************************
-- 3. DEFINICI칍N DE ESTRUCTURA (DDL)
-- Creaci칩n de Tablas, Claves y Secuencias
-- *************************************************************

-- 游댐 Se crean secuencias con valores espec칤ficos para replicar los IDs de los ejemplos:
CREATE SEQUENCE SQ_COMUNA_ID START WITH 1101 INCREMENT BY 6; -- Requerimiento: inicia en 1101, incrementa en 6
CREATE SEQUENCE SQ_COMPANIA_ID START WITH 10 INCREMENT BY 5; -- Requerimiento: inicia en 10, incrementa en 5

-- TABLA REGION (Usa Identity: ID inicia en 7 e incrementa en 2)
CREATE TABLE REGION (
    ID_REGION      NUMBER(2)       GENERATED ALWAYS AS IDENTITY START WITH 7 INCREMENT BY 2 PRIMARY KEY,
    NOMBRE_REGION VARCHAR2(25)   NOT NULL
);

-- TABLA IDIOMA (Usa Identity: ID inicia en 25 e incrementa en 3)
CREATE TABLE IDIOMA (
    ID_IDIOMA      NUMBER(3)       GENERATED ALWAYS AS IDENTITY START WITH 25 INCREMENT BY 3 PRIMARY KEY,
    NOMBRE_IDIOMA VARCHAR2(30)   NOT NULL
);

-- TABLAS FUERTES SIMPLES
CREATE TABLE ESTADO_CIVIL (
    ID_ESTADO_CIVIL      VARCHAR2(2) PRIMARY KEY,
    DESCRIPCION_EST_CIVIL VARCHAR2(25) NOT NULL
);

CREATE TABLE TITULO (
    ID_TITULO         VARCHAR2(3) PRIMARY KEY,
    DESCRIPCION_TITULO VARCHAR2(60) NOT NULL
);

CREATE TABLE GENERO (
    ID_GENERO      VARCHAR2(2) PRIMARY KEY,
    DESCRIPCION_GENERO VARCHAR2(25) NOT NULL
);

-- TABLA COMUNA (Dependiente de REGION, usa PK compuesta en FK)
CREATE TABLE COMUNA (
    ID_COMUNA      NUMBER(5)       NOT NULL, -- Se usar치 como parte de la PK compuesta
    COMUNA_NOMBRE VARCHAR2(25)   NOT NULL,
    COD_REGION    NUMBER(2)       NOT NULL,
    CONSTRAINT COMUNA_PK PRIMARY KEY (ID_COMUNA, COD_REGION), -- PK Compuesta (ID_COMUNA, COD_REGION)
    CONSTRAINT COMUNA_FK_REGION FOREIGN KEY (COD_REGION) REFERENCES REGION(ID_REGION)
);

-- TABLA COMPANIA (Dependiente de COMUNA)
CREATE TABLE COMPANIA (
    ID_EMPRESA      NUMBER(2)    PRIMARY KEY,
    NOMBRE_EMPRESA  VARCHAR2(25) NOT NULL,
    CALLE           VARCHAR2(50) NOT NULL,
    NUMERACION      NUMBER(5)    NOT NULL,
    RENTA_PROMEDIO  NUMBER(10)   NOT NULL,
    PCT_AUMENTO     NUMBER(4,3),
    COD_COMUNA      NUMBER(5)    NOT NULL,
    COD_REGION      NUMBER(2)    NOT NULL,
    CONSTRAINT COMPANIA_UN_NOMBRE UNIQUE (NOMBRE_EMPRESA),
    -- FK que referencia la PK compuesta de COMUNA
    CONSTRAINT COMPANIA_FK_COMUNA FOREIGN KEY (COD_COMUNA, COD_REGION) REFERENCES COMUNA(ID_COMUNA, COD_REGION)
);

-- TABLA PERSONAL (El coraz칩n del modelo)
CREATE TABLE PERSONAL (
    RUT_PERSONA           NUMBER(8)    PRIMARY KEY,
    DV_PERSONA            CHAR(1)      NOT NULL,
    PRIMER_NOMBRE         VARCHAR2(25) NOT NULL,
    SEGUNDO_NOMBRE        VARCHAR2(25),
    PRIMER_APELLIDO       VARCHAR2(25) NOT NULL,
    SEGUNDO_APELLIDO      VARCHAR2(25) NOT NULL,
    FECHA_CONTRATACION    DATE         NOT NULL,
    FECHA_NACIMIENTO      DATE         NOT NULL,
    EMAIL                 VARCHAR2(100),
    CALLE                 VARCHAR2(50) NOT NULL,
    NUMERACION            NUMBER(5)    NOT NULL,
    SUELDO                NUMBER(10)   NOT NULL,
    COD_COMUNA            NUMBER(5)    NOT NULL,
    COD_REGION            NUMBER(2)    NOT NULL,
    COD_ESTADO_CIVIL      VARCHAR2(2)  NOT NULL,
    COD_GENERO            VARCHAR2(2)  NOT NULL,
    COD_EMPRESA           NUMBER(2)    NOT NULL,
    ENCARGADO_RUT         NUMBER(8), -- FK de auto-referencia

    CONSTRAINT PERSONAL_FK_COMPANIA FOREIGN KEY (COD_EMPRESA) REFERENCES COMPANIA(ID_EMPRESA),
    CONSTRAINT PERSONAL_FK_COMUNA FOREIGN KEY (COD_COMUNA, COD_REGION) REFERENCES COMUNA(ID_COMUNA, COD_REGION),
    CONSTRAINT PERSONAL_FK_ESTADO_CIVIL FOREIGN KEY (COD_ESTADO_CIVIL) REFERENCES ESTADO_CIVIL(ID_ESTADO_CIVIL),
    CONSTRAINT PERSONAL_FK_GENERO FOREIGN KEY (COD_GENERO) REFERENCES GENERO(ID_GENERO),
    CONSTRAINT PERSONAL_FK_ENCARGADO FOREIGN KEY (ENCARGADO_RUT) REFERENCES PERSONAL(RUT_PERSONA)
);

-- TABLA TITULACION (M:M entre TITULO y PERSONAL)
CREATE TABLE TITULACION (
    COD_TITULO          VARCHAR2(3) NOT NULL,
    PERSONA_RUT         NUMBER(8)   NOT NULL,
    FECHA_TITULACION    DATE        NOT NULL,
    CONSTRAINT TITULACION_PK PRIMARY KEY (COD_TITULO, PERSONA_RUT),
    CONSTRAINT TITULACION_FK_TITULO FOREIGN KEY (COD_TITULO) REFERENCES TITULO(ID_TITULO),
    CONSTRAINT TITULACION_FK_PERSONAL FOREIGN KEY (PERSONA_RUT) REFERENCES PERSONAL(RUT_PERSONA)
);

-- TABLA DOMINIO (M:M entre IDIOMA y PERSONAL)
CREATE TABLE DOMINIO (
    ID_IDIOMA   NUMBER(3)   NOT NULL,
    PERSONA_RUT NUMBER(8)   NOT NULL,
    NIVEL       VARCHAR2(25) NOT NULL,
    CONSTRAINT DOMINIO_PK PRIMARY KEY (ID_IDIOMA, PERSONA_RUT),
    CONSTRAINT DOMINIO_FK_IDIOMA FOREIGN KEY (ID_IDIOMA) REFERENCES IDIOMA(ID_IDIOMA),
    CONSTRAINT DOMINIO_FK_PERSONAL FOREIGN KEY (PERSONA_RUT) REFERENCES PERSONAL(RUT_PERSONA)
);


-- *************************************************************
-- 4. MODIFICACI칍N DE ESTRUCTURA (ALTER TABLE)
-- Implementaci칩n de los 3 requisitos de negocio con CHECK y UNIQUE
-- *************************************************************

-- 1. Aunque el email de una persona es opcional, no se debe repetir.
ALTER TABLE PERSONAL ADD CONSTRAINT PERSONAL_UN_EMAIL UNIQUE (EMAIL);

-- 2. El d칤gito verificador del RUN del PERSONAL debe ser un valor v치lido.
ALTER TABLE PERSONAL ADD CONSTRAINT PERSONAL_CK_DV CHECK (DV_PERSONA IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'K'));

-- 3. El sueldo m칤nimo del personal es de 450.000 pesos.
ALTER TABLE PERSONAL ADD CONSTRAINT PERSONAL_CK_SUELDO CHECK (SUELDO >= 450000);


-- *************************************************************
-- 5. POBLAMIENTO DE DATOS (DML - INSERT)
-- Inserci칩n de datos en las 4 tablas requeridas
-- *************************************************************

-- TABLA REGION (Usa IDENTITY, genera IDs 7, 9, 11)
INSERT INTO REGION (NOMBRE_REGION) VALUES ('ARICA Y PARINACOTA'); 
INSERT INTO REGION (NOMBRE_REGION) VALUES ('METROPOLITANA');    
INSERT INTO REGION (NOMBRE_REGION) VALUES ('LA ARAUCANIA');     

-- TABLA IDIOMA (Usa IDENTITY, genera IDs 25, 28, 31, 34, 37)
INSERT INTO IDIOMA (NOMBRE_IDIOMA) VALUES ('Ingles');   
INSERT INTO IDIOMA (NOMBRE_IDIOMA) VALUES ('Chino');    
INSERT INTO IDIOMA (NOMBRE_IDIOMA) VALUES ('Aleman');   
INSERT INTO IDIOMA (NOMBRE_IDIOMA) VALUES ('Espanol');  
INSERT INTO IDIOMA (NOMBRE_IDIOMA) VALUES ('Frances');  

-- TABLA COMUNA (Usa SEQUENCE, genera IDs 1101, 1107, 1113)
INSERT INTO COMUNA (ID_COMUNA, COMUNA_NOMBRE, COD_REGION) VALUES (SQ_COMUNA_ID.NEXTVAL, 'Arica', 7);       
INSERT INTO COMUNA (ID_COMUNA, COMUNA_NOMBRE, COD_REGION) VALUES (SQ_COMUNA_ID.NEXTVAL, 'Santiago', 9);    
INSERT INTO COMUNA (ID_COMUNA, COMUNA_NOMBRE, COD_REGION) VALUES (SQ_COMUNA_ID.NEXTVAL, 'Temuco', 11);      

-- TABLA COMPANIA (Usa SEQUENCE, genera IDs 10, 15, 20, 25, ...)
-- La inserci칩n debe coincidir con los IDs de COMUNA y REGION creados arriba.
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'CCyRojas', 'Amapolas', 506, 1857000, 0.5, 1101, 7); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'SenTty', 'Los Alamos', 3490, 897000, 0.025, 1101, 7); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'Praxia LTDA', 'Las Camelias', 11098, 2157000, 0.035, 1107, 9); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'TIC spa', 'FLORES S.A.', 4357, 857000, NULL, 1107, 9); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'SANTANA LTDA', 'AVDA VIC. MACKENA', 106, 757000, 0.015, 1101, 7); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'FLORES Y ASOCIADOS', 'PEDRO LATORRE', 557, 589000, 0.015, 1107, 9); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'J.A. HOFFMAN', 'LATINA D.32', 509, 1857000, 0.025, 1113, 11); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'CAGLIARI D.', 'ALAMEDA', 206, 1857000, NULL, 1107, 9); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'Rojas HNOS LTDA', 'SUCRE', 106, 957000, 0.005, 1113, 11); 
INSERT INTO COMPANIA (ID_EMPRESA, NOMBRE_EMPRESA, CALLE, NUMERACION, RENTA_PROMEDIO, PCT_AUMENTO, COD_COMUNA, COD_REGION)
VALUES (SQ_COMPANIA_ID.NEXTVAL, 'FRIENDS P. S.A', 'SUECIA', 506, 857000, 0.015, 1113, 11); 

COMMIT;


-- *************************************************************
-- 6. CONSULTAS Y REPORTES DE NEGOCIO (DML - SELECT)
-- Generaci칩n de los dos informes solicitados
-- *************************************************************

-- INFORME 1: Simulaci칩n de Renta Promedio
SELECT
    NOMBRE_EMPRESA AS "Nombre Empresa",
    -- Concatenaci칩n de calle y n칰mero
    CALLE || ' ' || NUMERACION AS "Direcci칩n", 
    RENTA_PROMEDIO AS "Renta Promedio",
    -- C치lculo del aumento. Si PCT_AUMENTO es NULL, el resultado de la columna tambi칠n es NULL.
    RENTA_PROMEDIO * (1 + PCT_AUMENTO) AS "Simulaci칩n de Renta"
FROM
    COMPANIA
ORDER BY
    "Renta Promedio" DESC, -- Primer criterio
    "Nombre Empresa" ASC;  -- Segundo criterio


-- INFORME 2: Nueva simulaci칩n renta promedio (A침adir 15% adicional)
SELECT
    ID_EMPRESA AS "CODIGO",
    NOMBRE_EMPRESA AS "EMPRESA",
    RENTA_PROMEDIO AS "PROM RENTA ACTUAL",
    -- Calcula el nuevo porcentaje (si PCT_AUMENTO es NULL, el resultado es NULL)
    PCT_AUMENTO + 0.15 AS "PCT AUMENTADO EN 15%",
    
    -- C츼LCULO OPTIMIZADO (Renta Final con aumento):
    -- Se utiliza la f칩rmula RENTA_PROMEDIO * (1 + Nuevo PCT) para obtener la renta FINAL
    RENTA_PROMEDIO * (1 + (PCT_AUMENTO + 0.15)) AS "RENTA AUMENTADA" 
    
    -- NOTA: Si se necesitara replicar un error de ejemplo que solo calcula el AUMENTO y no la Renta Final,
    -- la f칩rmula ser칤a: RENTA_PROMEDIO * (PCT_AUMENTO + 0.15)
FROM
    COMPANIA
ORDER BY
    "PROM RENTA ACTUAL" ASC, -- Primer criterio
    "EMPRESA" DESC;          -- Segundo criterio

-- FIN DEL SCRIPT